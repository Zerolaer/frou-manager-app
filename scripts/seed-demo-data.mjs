import { createClient } from '@supabase/supabase-js'

// Supabase configuration - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
const supabaseUrl = 'https://your-project.supabase.co'
const supabaseKey = 'your-anon-key'

const supabase = createClient(supabaseUrl, supabaseKey)

// Demo user credentials
const DEMO_USER = {
  email: 'demo@frovo.com',
  password: 'demo123456',
  name: 'Demo User'
}

// Demo data
const DEMO_PROJECTS = [
  { name: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', color: '#3B82F6', description: '–ü—Ä–æ–µ–∫—Ç—ã –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' },
  { name: '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', color: '#10B981', description: 'iOS –∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' },
  { name: '–î–∏–∑–∞–π–Ω', color: '#F59E0B', description: 'UI/UX –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç—ã' },
  { name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', color: '#EF4444', description: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏' }
]

const DEMO_TASKS = [
  {
    title: '–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
    description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω –∏ –≤–µ—Ä—Å—Ç–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞',
    priority: 'high',
    project: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
    date: '2024-01-15',
    completed: false
  },
  {
    title: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
    description: '–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –ë–î –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
    priority: 'high',
    project: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
    date: '2024-01-16',
    completed: true
  },
  {
    title: '–°–æ–∑–¥–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø',
    description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥–∞',
    priority: 'medium',
    project: '–î–∏–∑–∞–π–Ω',
    date: '2024-01-17',
    completed: false
  },
  {
    title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
    description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –Ω–∏—à–µ',
    priority: 'low',
    project: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
    date: '2024-01-18',
    completed: false
  },
  {
    title: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    priority: 'medium',
    project: '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    date: '2024-01-19',
    completed: false
  }
]

const DEMO_FINANCE_CATEGORIES = {
  income: [
    { name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', parent_id: null },
    { name: '–§—Ä–∏–ª–∞–Ω—Å', parent_id: null },
    { name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', parent_id: null },
    { name: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', parent_id: '–§—Ä–∏–ª–∞–Ω—Å' },
    { name: '–î–∏–∑–∞–π–Ω', parent_id: '–§—Ä–∏–ª–∞–Ω—Å' },
    { name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', parent_id: '–§—Ä–∏–ª–∞–Ω—Å' }
  ],
  expenses: [
    { name: '–ü—Ä–æ–¥—É–∫—Ç—ã', parent_id: null },
    { name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', parent_id: null },
    { name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', parent_id: null },
    { name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', parent_id: null },
    { name: '–ó–¥–æ—Ä–æ–≤—å–µ', parent_id: null },
    { name: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', parent_id: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' },
    { name: '–ö–∏–Ω–æ', parent_id: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' },
    { name: '–ö—É—Ä—Å—ã', parent_id: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' },
    { name: '–ö–Ω–∏–≥–∏', parent_id: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' }
  ]
}

const DEMO_FINANCE_DATA = {
  income: [
    { category: '–ó–∞—Ä–ø–ª–∞—Ç–∞', values: [5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000] },
    { category: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', values: [1200, 800, 1500, 900, 1100, 1300, 700, 1600, 1000, 1400, 800, 1200] },
    { category: '–î–∏–∑–∞–π–Ω', values: [600, 400, 800, 500, 700, 900, 300, 1000, 600, 800, 400, 700] },
    { category: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', values: [300, 200, 400, 250, 350, 450, 150, 500, 300, 400, 200, 350] }
  ],
  expenses: [
    { category: '–ü—Ä–æ–¥—É–∫—Ç—ã', values: [800, 750, 900, 850, 820, 880, 780, 920, 800, 860, 740, 890] },
    { category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', values: [200, 180, 220, 190, 210, 230, 170, 240, 200, 220, 180, 210] },
    { category: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', values: [300, 250, 400, 350, 320, 380, 280, 420, 300, 360, 240, 390] },
    { category: '–ö–∏–Ω–æ', values: [50, 40, 60, 45, 55, 65, 35, 70, 50, 60, 40, 55] },
    { category: '–ö—É—Ä—Å—ã', values: [200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] },
    { category: '–ö–Ω–∏–≥–∏', values: [100, 50, 80, 60, 70, 90, 40, 100, 60, 80, 50, 70] },
    { category: '–ó–¥–æ—Ä–æ–≤—å–µ', values: [150, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
  ]
}

const DEMO_NOTES = [
  {
    title: '–ò–¥–µ–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
    content: `
      <h3>–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h3>
      <p>–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞:</p>
      <ul>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é —Ç—Ä–∞—Ç</li>
        <li>–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤—ã—á–µ–∫ —Ç—Ä–∞—Ç</li>
        <li>–¶–µ–ª–∏ –∏ –±—é–¥–∂–µ—Ç—ã</li>
        <li>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–∞–Ω–∫–∞–º–∏</li>
      </ul>
      <h4>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</h4>
      <p>React Native, Node.js, PostgreSQL</p>
    `,
    folder: '–ü—Ä–æ–µ–∫—Ç—ã',
    pinned: true
  },
  {
    title: '–ü–ª–∞–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é',
    content: `
      <h3>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</h3>
      <p>‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 10:00</p>
      <p>‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –¥–∏–∑–∞–π–Ω–æ–º –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
      
      <h3>–í—Ç–æ—Ä–Ω–∏–∫</h3>
      <p>‚Ä¢ –ö–æ–¥-—Ä–µ–≤—å—é —Å –∫–æ–º–∞–Ω–¥–æ–π</p>
      <p>‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</p>
      
      <h3>–°—Ä–µ–¥–∞</h3>
      <p>‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞</p>
      <p>‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞</p>
    `,
    folder: '–ü–ª–∞–Ω—ã',
    pinned: false
  },
  {
    title: '–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
    content: `
      <h3>Next.js 14</h3>
      <p>–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</p>
      <ul>
        <li>App Router</li>
        <li>Server Components</li>
        <li>Streaming</li>
      </ul>
      
      <h3>React Server Components</h3>
      <p>–ü–æ–Ω—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</p>
      
      <h3>–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:</h3>
      <p>‚Ä¢ <a href="https://nextjs.org/docs">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a></p>
      <p>‚Ä¢ <a href="https://vercel.com/blog">–ë–ª–æ–≥ Vercel</a></p>
    `,
    folder: '–û–±—É—á–µ–Ω–∏–µ',
    pinned: true
  },
  {
    title: '–í—Å—Ç—Ä–µ—á–∏ –∏ —Å–æ–±—ã—Ç–∏—è',
    content: `
      <h3>–Ø–Ω–≤–∞—Ä—å 2024</h3>
      <p><strong>15 —è–Ω–≤–∞—Ä—è</strong> - –í—Å—Ç—Ä–µ—á–∞ —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º</p>
      <p><strong>20 —è–Ω–≤–∞—Ä—è</strong> - –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
      <p><strong>25 —è–Ω–≤–∞—Ä—è</strong> - –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–ª–ª–µ–≥–∏</p>
      
      <h3>–§–µ–≤—Ä–∞–ª—å 2024</h3>
      <p><strong>5 —Ñ–µ–≤—Ä–∞–ª—è</strong> - –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞</p>
      <p><strong>14 —Ñ–µ–≤—Ä–∞–ª—è</strong> - –í—ã—Ö–æ–¥–Ω–æ–π</p>
    `,
    folder: '–°–æ–±—ã—Ç–∏—è',
    pinned: false
  }
]

const DEMO_FOLDERS = [
  { name: '–ü—Ä–æ–µ–∫—Ç—ã', color: '#3B82F6' },
  { name: '–ü–ª–∞–Ω—ã', color: '#10B981' },
  { name: '–û–±—É—á–µ–Ω–∏–µ', color: '#F59E0B' },
  { name: '–°–æ–±—ã—Ç–∏—è', color: '#EF4444' },
  { name: '–õ–∏—á–Ω–æ–µ', color: '#8B5CF6' }
]

async function createDemoUser() {
  console.log('üîê Creating demo user...')
  
  const { data: authData, error: authError } = await supabase.auth.signUp({
    email: DEMO_USER.email,
    password: DEMO_USER.password,
    options: {
      data: {
        name: DEMO_USER.name
      }
    }
  })
  
  if (authError) {
    console.error('‚ùå Error creating user:', authError.message)
    return null
  }
  
  console.log('‚úÖ Demo user created:', authData.user?.email)
  return authData.user
}

async function createProjects(userId) {
  console.log('üìÅ Creating projects...')
  
  const projects = DEMO_PROJECTS.map(project => ({
    ...project,
    user_id: userId,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }))
  
  const { data, error } = await supabase
    .from('projects')
    .insert(projects)
    .select()
  
  if (error) {
    console.error('‚ùå Error creating projects:', error.message)
    return []
  }
  
  console.log('‚úÖ Projects created:', data.length)
  return data
}

async function createTasks(userId, projects) {
  console.log('‚úÖ Creating tasks...')
  
  const projectMap = {}
  projects.forEach(project => {
    projectMap[project.name] = project.id
  })
  
  const tasks = DEMO_TASKS.map(task => ({
    title: task.title,
    description: task.description,
    priority: task.priority,
    project_id: projectMap[task.project],
    date: task.date,
    completed: task.completed,
    user_id: userId,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }))
  
  const { data, error } = await supabase
    .from('tasks')
    .insert(tasks)
    .select()
  
  if (error) {
    console.error('‚ùå Error creating tasks:', error.message)
    return []
  }
  
  console.log('‚úÖ Tasks created:', data.length)
  return data
}

async function createFinanceCategories(userId) {
  console.log('üí∞ Creating finance categories...')
  
  const allCategories = [
    ...DEMO_FINANCE_CATEGORIES.income.map(cat => ({
      ...cat,
      type: 'income',
      user_id: userId,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    })),
    ...DEMO_FINANCE_CATEGORIES.expenses.map(cat => ({
      ...cat,
      type: 'expense',
      user_id: userId,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }))
  ]
  
  const { data, error } = await supabase
    .from('finance_categories')
    .insert(allCategories)
    .select()
  
  if (error) {
    console.error('‚ùå Error creating finance categories:', error.message)
    return []
  }
  
  console.log('‚úÖ Finance categories created:', data.length)
  return data
}

async function createFinanceData(userId, categories) {
  console.log('üìä Creating finance data...')
  
  const categoryMap = {}
  categories.forEach(cat => {
    categoryMap[cat.name] = cat.id
  })
  
  const allData = [
    ...DEMO_FINANCE_DATA.income.map(item => ({
      category_id: categoryMap[item.category],
      values: item.values,
      user_id: userId,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    })),
    ...DEMO_FINANCE_DATA.expenses.map(item => ({
      category_id: categoryMap[item.category],
      values: item.values,
      user_id: userId,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }))
  ]
  
  const { data, error } = await supabase
    .from('finance_data')
    .insert(allData)
    .select()
  
  if (error) {
    console.error('‚ùå Error creating finance data:', error.message)
    return []
  }
  
  console.log('‚úÖ Finance data created:', data.length)
  return data
}

async function createFolders(userId) {
  console.log('üìÇ Creating folders...')
  
  const folders = DEMO_FOLDERS.map(folder => ({
    ...folder,
    user_id: userId,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }))
  
  const { data, error } = await supabase
    .from('folders')
    .insert(folders)
    .select()
  
  if (error) {
    console.error('‚ùå Error creating folders:', error.message)
    return []
  }
  
  console.log('‚úÖ Folders created:', data.length)
  return data
}

async function createNotes(userId, folders) {
  console.log('üìù Creating notes...')
  
  const folderMap = {}
  folders.forEach(folder => {
    folderMap[folder.name] = folder.id
  })
  
  const notes = DEMO_NOTES.map(note => ({
    title: note.title,
    content: note.content,
    folder_id: folderMap[note.folder],
    pinned: note.pinned,
    user_id: userId,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }))
  
  const { data, error } = await supabase
    .from('notes')
    .insert(notes)
    .select()
  
  if (error) {
    console.error('‚ùå Error creating notes:', error.message)
    return []
  }
  
  console.log('‚úÖ Notes created:', data.length)
  return data
}

async function seedDemoData() {
  try {
    console.log('üöÄ Starting demo data seeding...')
    
    // Create demo user
    const user = await createDemoUser()
    if (!user) {
      console.error('‚ùå Failed to create demo user')
      return
    }
    
    // Create projects
    const projects = await createProjects(user.id)
    
    // Create tasks
    const tasks = await createTasks(user.id, projects)
    
    // Create finance categories
    const financeCategories = await createFinanceCategories(user.id)
    
    // Create finance data
    const financeData = await createFinanceData(user.id, financeCategories)
    
    // Create folders
    const folders = await createFolders(user.id)
    
    // Create notes
    const notes = await createNotes(user.id, folders)
    
    console.log('üéâ Demo data seeding completed!')
    console.log('üìä Summary:')
    console.log(`   üë§ User: ${user.email}`)
    console.log(`   üìÅ Projects: ${projects.length}`)
    console.log(`   ‚úÖ Tasks: ${tasks.length}`)
    console.log(`   üí∞ Finance Categories: ${financeCategories.length}`)
    console.log(`   üìä Finance Data: ${financeData.length}`)
    console.log(`   üìÇ Folders: ${folders.length}`)
    console.log(`   üìù Notes: ${notes.length}`)
    
    console.log('\nüîë Demo credentials:')
    console.log(`   Email: ${DEMO_USER.email}`)
    console.log(`   Password: ${DEMO_USER.password}`)
    
  } catch (error) {
    console.error('‚ùå Error seeding demo data:', error)
  }
}

// Run the seeding
seedDemoData()

