#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'

// Supabase –¥–∞–Ω–Ω—ã–µ
const supabaseUrl = 'https://anugfsevzdpsehfzflji.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFudWdmc2V2emRwc2VoZnpmbGppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3OTM4NDEsImV4cCI6MjA3MTM2OTg0MX0.1-UpIU59Xp8T93Gcp5TpIOXJVSm2ANdTvEm69uD1ciw'

const supabase = createClient(supabaseUrl, supabaseKey)

console.log('üöÄ FROVO Manager - –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ')
console.log('================================\n')

async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...')
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüë§ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const { data: authData, error: signUpError } = await supabase.auth.signUp({
      email: 'demo@frovo.com',
      password: 'demo123456',
      options: {
        data: {
          name: 'Demo User'
        }
      }
    })
    
    if (signUpError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', signUpError.message)
      if (signUpError.message.includes('already registered')) {
        console.log('‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...')
      } else {
        process.exit(1)
      }
    } else {
      console.log('‚úÖ –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', authData.user?.email)
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    let demoUserId
    if (authData?.user) {
      demoUserId = authData.user.id
    } else {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: existingUser } = await supabase.auth.signInWithPassword({
        email: 'demo@frovo.com',
        password: 'demo123456'
      })
      if (existingUser?.user) {
        demoUserId = existingUser.user.id
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', existingUser.user.email)
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        process.exit(1)
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    console.log('\nüìÅ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã...')
    const projects = [
      { name: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', color: '#3B82F6', description: '–ü—Ä–æ–µ–∫—Ç—ã –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' },
      { name: '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', color: '#10B981', description: 'iOS –∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' },
      { name: '–î–∏–∑–∞–π–Ω', color: '#F59E0B', description: 'UI/UX –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç—ã' },
      { name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', color: '#EF4444', description: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏' }
    ]
    
    const { data: projectsData, error: projectsError } = await supabase
      .from('projects')
      .insert(projects.map(p => ({ ...p, user_id: demoUserId })))
      .select()
    
    if (projectsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsError.message)
    } else {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', projectsData.length)
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
    console.log('\n‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏...')
    const projectMap = {}
    projectsData?.forEach(project => {
      projectMap[project.name] = project.id
    })
    
    const tasks = [
      {
        title: '–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω –∏ –≤–µ—Ä—Å—Ç–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞',
        priority: 'high',
        project_id: projectMap['–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
        date: '2024-01-15',
        completed: false
      },
      {
        title: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
        description: '–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –ë–î –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
        priority: 'high',
        project_id: projectMap['–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
        date: '2024-01-16',
        completed: true
      },
      {
        title: '–°–æ–∑–¥–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥–∞',
        priority: 'medium',
        project_id: projectMap['–î–∏–∑–∞–π–Ω'],
        date: '2024-01-17',
        completed: false
      },
      {
        title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
        description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –Ω–∏—à–µ',
        priority: 'low',
        project_id: projectMap['–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥'],
        date: '2024-01-18',
        completed: false
      },
      {
        title: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        priority: 'medium',
        project_id: projectMap['–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'],
        date: '2024-01-19',
        completed: false
      }
    ]
    
    const { data: tasksData, error: tasksError } = await supabase
      .from('tasks')
      .insert(tasks.map(t => ({ ...t, user_id: demoUserId })))
      .select()
    
    if (tasksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:', tasksError.message)
    } else {
      console.log('‚úÖ –ó–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã:', tasksData.length)
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
    console.log('\nüìÇ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏...')
    const folders = [
      { name: '–ü—Ä–æ–µ–∫—Ç—ã', color: '#3B82F6' },
      { name: '–ü–ª–∞–Ω—ã', color: '#10B981' },
      { name: '–û–±—É—á–µ–Ω–∏–µ', color: '#F59E0B' },
      { name: '–°–æ–±—ã—Ç–∏—è', color: '#EF4444' },
      { name: '–õ–∏—á–Ω–æ–µ', color: '#8B5CF6' }
    ]
    
    const { data: foldersData, error: foldersError } = await supabase
      .from('folders')
      .insert(folders.map(f => ({ ...f, user_id: demoUserId })))
      .select()
    
    if (foldersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫:', foldersError.message)
    } else {
      console.log('‚úÖ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:', foldersData.length)
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
    console.log('\nüìù –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫–∏...')
    const folderMap = {}
    foldersData?.forEach(folder => {
      folderMap[folder.name] = folder.id
    })
    
    const notes = [
      {
        title: '–ò–¥–µ–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
        content: '<h3>–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h3><p>–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞:</p><ul><li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é —Ç—Ä–∞—Ç</li><li>–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤—ã—á–µ–∫ —Ç—Ä–∞—Ç</li><li>–¶–µ–ª–∏ –∏ –±—é–¥–∂–µ—Ç—ã</li><li>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–∞–Ω–∫–∞–º–∏</li></ul><h4>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</h4><p>React Native, Node.js, PostgreSQL</p>',
        folder_id: folderMap['–ü—Ä–æ–µ–∫—Ç—ã'],
        pinned: true
      },
      {
        title: '–ü–ª–∞–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é',
        content: '<h3>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</h3><p>‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 10:00</p><p>‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –¥–∏–∑–∞–π–Ω–æ–º –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p><h3>–í—Ç–æ—Ä–Ω–∏–∫</h3><p>‚Ä¢ –ö–æ–¥-—Ä–µ–≤—å—é —Å –∫–æ–º–∞–Ω–¥–æ–π</p><p>‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</p><h3>–°—Ä–µ–¥–∞</h3><p>‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞</p><p>‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞</p>',
        folder_id: folderMap['–ü–ª–∞–Ω—ã'],
        pinned: false
      },
      {
        title: '–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
        content: '<h3>Next.js 14</h3><p>–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</p><ul><li>App Router</li><li>Server Components</li><li>Streaming</li></ul><h3>React Server Components</h3><p>–ü–æ–Ω—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</p>',
        folder_id: folderMap['–û–±—É—á–µ–Ω–∏–µ'],
        pinned: true
      },
      {
        title: '–í—Å—Ç—Ä–µ—á–∏ –∏ —Å–æ–±—ã—Ç–∏—è',
        content: '<h3>–Ø–Ω–≤–∞—Ä—å 2024</h3><p><strong>15 —è–Ω–≤–∞—Ä—è</strong> - –í—Å—Ç—Ä–µ—á–∞ —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º</p><p><strong>20 —è–Ω–≤–∞—Ä—è</strong> - –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p><p><strong>25 —è–Ω–≤–∞—Ä—è</strong> - –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–ª–ª–µ–≥–∏</p>',
        folder_id: folderMap['–°–æ–±—ã—Ç–∏—è'],
        pinned: false
      }
    ]
    
    const { data: notesData, error: notesError } = await supabase
      .from('notes')
      .insert(notes.map(n => ({ ...n, user_id: demoUserId })))
      .select()
    
    if (notesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫:', notesError.message)
    } else {
      console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:', notesData.length)
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\nüí∞ –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...')
    const financeCategories = [
      { name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', type: 'income', parent_id: null },
      { name: '–§—Ä–∏–ª–∞–Ω—Å', type: 'income', parent_id: null },
      { name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', type: 'income', parent_id: null },
      { name: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', type: 'income', parent_id: '–§—Ä–∏–ª–∞–Ω—Å' },
      { name: '–î–∏–∑–∞–π–Ω', type: 'income', parent_id: '–§—Ä–∏–ª–∞–Ω—Å' },
      { name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', type: 'income', parent_id: '–§—Ä–∏–ª–∞–Ω—Å' },
      { name: '–ü—Ä–æ–¥—É–∫—Ç—ã', type: 'expense', parent_id: null },
      { name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', type: 'expense', parent_id: null },
      { name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', type: 'expense', parent_id: null },
      { name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', type: 'expense', parent_id: null },
      { name: '–ó–¥–æ—Ä–æ–≤—å–µ', type: 'expense', parent_id: null },
      { name: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', type: 'expense', parent_id: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' },
      { name: '–ö–∏–Ω–æ', type: 'expense', parent_id: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' },
      { name: '–ö—É—Ä—Å—ã', type: 'expense', parent_id: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' },
      { name: '–ö–Ω–∏–≥–∏', type: 'expense', parent_id: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' }
    ]
    
    const { data: financeCatsData, error: financeCatsError } = await supabase
      .from('finance_categories')
      .insert(financeCategories.map(c => ({ ...c, user_id: demoUserId })))
      .select()
    
    if (financeCatsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', financeCatsError.message)
    } else {
      console.log('‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:', financeCatsData.length)
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìä –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...')
    const categoryMap = {}
    financeCatsData?.forEach(cat => {
      categoryMap[cat.name] = cat.id
    })
    
    const financeData = [
      { category: '–ó–∞—Ä–ø–ª–∞—Ç–∞', values: [5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000] },
      { category: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', values: [1200, 800, 1500, 900, 1100, 1300, 700, 1600, 1000, 1400, 800, 1200] },
      { category: '–î–∏–∑–∞–π–Ω', values: [600, 400, 800, 500, 700, 900, 300, 1000, 600, 800, 400, 700] },
      { category: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', values: [300, 200, 400, 250, 350, 450, 150, 500, 300, 400, 200, 350] },
      { category: '–ü—Ä–æ–¥—É–∫—Ç—ã', values: [800, 750, 900, 850, 820, 880, 780, 920, 800, 860, 740, 890] },
      { category: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', values: [200, 180, 220, 190, 210, 230, 170, 240, 200, 220, 180, 210] },
      { category: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', values: [300, 250, 400, 350, 320, 380, 280, 420, 300, 360, 240, 390] },
      { category: '–ö–∏–Ω–æ', values: [50, 40, 60, 45, 55, 65, 35, 70, 50, 60, 40, 55] },
      { category: '–ö—É—Ä—Å—ã', values: [200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] },
      { category: '–ö–Ω–∏–≥–∏', values: [100, 50, 80, 60, 70, 90, 40, 100, 60, 80, 50, 70] },
      { category: '–ó–¥–æ—Ä–æ–≤—å–µ', values: [150, 0, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
    ]
    
    const { data: financeDataResult, error: financeDataError } = await supabase
      .from('finance_data')
      .insert(financeData.map(item => ({
        category_id: categoryMap[item.category],
        values: item.values,
        user_id: demoUserId
      })))
      .select()
    
    if (financeDataError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', financeDataError.message)
    } else {
      console.log('‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:', financeDataResult.length)
    }
    
    console.log('\nüéâ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!')
    console.log('\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:')
    console.log('   Email: demo@frovo.com')
    console.log('   Password: demo123456')
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–æ:')
    console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 1`)
    console.log(`   üìÅ –ü—Ä–æ–µ–∫—Ç—ã: ${projectsData?.length || 0}`)
    console.log(`   ‚úÖ –ó–∞–¥–∞—á–∏: ${tasksData?.length || 0}`)
    console.log(`   üìÇ –ü–∞–ø–∫–∏: ${foldersData?.length || 0}`)
    console.log(`   üìù –ó–∞–º–µ—Ç–∫–∏: ${notesData?.length || 0}`)
    console.log(`   üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${financeCatsData?.length || 0}`)
    console.log(`   üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${financeDataResult?.length || 0}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
  }
}

main()
