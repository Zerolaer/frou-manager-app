#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'

// Supabase –¥–∞–Ω–Ω—ã–µ
const supabaseUrl = 'https://anugfsevzdpsehfzflji.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFudWdmc2V2emRwc2VoZnpmbGppIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3OTM4NDEsImV4cCI6MjA3MTM2OTg0MX0.1-UpIU59Xp8T93Gcp5TpIOXJVSm2ANdTvEm69uD1ciw'

const supabase = createClient(supabaseUrl, supabaseKey)

console.log('üöÄ –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...')

async function fillData() {
  try {
    // –í—Ö–æ–¥–∏–º –∫–∞–∫ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    console.log('üîê –í—Ö–æ–¥–∏–º –∫–∞–∫ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å...')
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: 'demo@frovo.com',
      password: 'demo123456'
    })
    
    if (signInError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', signInError.message)
      return
    }
    
    console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!')
    const userId = signInData.user.id
    
    // 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    console.log('\nüìÅ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã...')
    const projects = [
      { name: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', color: '#3B82F6', description: '–ü—Ä–æ–µ–∫—Ç—ã –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' },
      { name: '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', color: '#10B981', description: 'iOS –∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' },
      { name: '–î–∏–∑–∞–π–Ω', color: '#F59E0B', description: 'UI/UX –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç—ã' },
      { name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', color: '#EF4444', description: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏' }
    ]
    
    const { data: projectsData, error: projectsError } = await supabase
      .from('projects')
      .insert(projects.map(p => ({ ...p, user_id: userId })))
      .select()
    
    if (projectsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsError.message)
    } else {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', projectsData.length)
    }
    
    // 2. –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    console.log('\nüìÇ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏...')
    const folders = [
      { name: '–ü—Ä–æ–µ–∫—Ç—ã', color: '#3B82F6' },
      { name: '–ü–ª–∞–Ω—ã', color: '#10B981' },
      { name: '–û–±—É—á–µ–Ω–∏–µ', color: '#F59E0B' },
      { name: '–°–æ–±—ã—Ç–∏—è', color: '#EF4444' },
      { name: '–õ–∏—á–Ω–æ–µ', color: '#8B5CF6' }
    ]
    
    const { data: foldersData, error: foldersError } = await supabase
      .from('folders')
      .insert(folders.map(f => ({ ...f, user_id: userId })))
      .select()
    
    if (foldersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫:', foldersError.message)
    } else {
      console.log('‚úÖ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:', foldersData.length)
    }
    
    // 3. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    console.log('\n‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏...')
    const projectMap = {}
    projectsData?.forEach(project => {
      projectMap[project.name] = project.id
    })
    
    const tasks = [
      {
        title: '–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω –∏ –≤–µ—Ä—Å—Ç–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞',
        priority: 'high',
        project_id: projectMap['–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
        date: '2024-01-15',
        completed: false,
        user_id: userId
      },
      {
        title: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
        description: '–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –ë–î –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
        priority: 'high',
        project_id: projectMap['–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
        date: '2024-01-16',
        completed: true,
        user_id: userId
      },
      {
        title: '–°–æ–∑–¥–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥–∞',
        priority: 'medium',
        project_id: projectMap['–î–∏–∑–∞–π–Ω'],
        date: '2024-01-17',
        completed: false,
        user_id: userId
      }
    ]
    
    const { data: tasksData, error: tasksError } = await supabase
      .from('tasks')
      .insert(tasks)
      .select()
    
    if (tasksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:', tasksError.message)
    } else {
      console.log('‚úÖ –ó–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã:', tasksData.length)
    }
    
    // 4. –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    console.log('\nüí∞ –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...')
    const financeCategories = [
      { name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', type: 'income', parent_id: null, user_id: userId },
      { name: '–§—Ä–∏–ª–∞–Ω—Å', type: 'income', parent_id: null, user_id: userId },
      { name: '–ü—Ä–æ–¥—É–∫—Ç—ã', type: 'expense', parent_id: null, user_id: userId },
      { name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', type: 'expense', parent_id: null, user_id: userId },
      { name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', type: 'expense', parent_id: null, user_id: userId }
    ]
    
    const { data: financeCatsData, error: financeCatsError } = await supabase
      .from('finance_categories')
      .insert(financeCategories)
      .select()
    
    if (financeCatsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', financeCatsError.message)
    } else {
      console.log('‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:', financeCatsData.length)
    }
    
    // 5. –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìä –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...')
    const categoryMap = {}
    financeCatsData?.forEach(cat => {
      categoryMap[cat.name] = cat.id
    })
    
    const financeData = [
      { 
        category_id: categoryMap['–ó–∞—Ä–ø–ª–∞—Ç–∞'], 
        values: [5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000],
        user_id: userId
      },
      { 
        category_id: categoryMap['–§—Ä–∏–ª–∞–Ω—Å'], 
        values: [1200, 800, 1500, 900, 1100, 1300, 700, 1600, 1000, 1400, 800, 1200],
        user_id: userId
      },
      { 
        category_id: categoryMap['–ü—Ä–æ–¥—É–∫—Ç—ã'], 
        values: [800, 750, 900, 850, 820, 880, 780, 920, 800, 860, 740, 890],
        user_id: userId
      },
      { 
        category_id: categoryMap['–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'], 
        values: [200, 180, 220, 190, 210, 230, 170, 240, 200, 220, 180, 210],
        user_id: userId
      },
      { 
        category_id: categoryMap['–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'], 
        values: [300, 250, 400, 350, 320, 380, 280, 420, 300, 360, 240, 390],
        user_id: userId
      }
    ]
    
    const { data: financeDataResult, error: financeDataError } = await supabase
      .from('finance_data')
      .insert(financeData)
      .select()
    
    if (financeDataError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', financeDataError.message)
    } else {
      console.log('‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:', financeDataResult.length)
    }
    
    console.log('\nüéâ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!')
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–æ:')
    console.log(`   üìÅ –ü—Ä–æ–µ–∫—Ç—ã: ${projectsData?.length || 0}`)
    console.log(`   üìÇ –ü–∞–ø–∫–∏: ${foldersData?.length || 0}`)
    console.log(`   ‚úÖ –ó–∞–¥–∞—á–∏: ${tasksData?.length || 0}`)
    console.log(`   üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${financeCatsData?.length || 0}`)
    console.log(`   üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${financeDataResult?.length || 0}`)
    
    console.log('\nüåê –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5174')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
  }
}

fillData()
