#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import readline from 'readline'

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve)
  })
}

console.log('üöÄ FROVO Manager - –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ')
console.log('================================\n')

async function main() {
  try {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Supabase
    const supabaseUrl = await question('–í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ Supabase –ø—Ä–æ–µ–∫—Ç–∞: ')
    const supabaseKey = await question('–í–≤–µ–¥–∏—Ç–µ anon key: ')
    
    if (!supabaseUrl || !supabaseKey) {
      console.log('‚ùå URL –∏ –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!')
      process.exit(1)
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...')
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (authError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', authError.message)
      process.exit(1)
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüë§ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const { data: authData, error: signUpError } = await supabase.auth.signUp({
      email: 'demo@frovo.com',
      password: 'demo123456',
      options: {
        data: {
          name: 'Demo User'
        }
      }
    })
    
    if (signUpError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', signUpError.message)
      process.exit(1)
    }
    
    const demoUser = authData.user
    console.log('‚úÖ –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', demoUser.email)
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    console.log('\nüìÅ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã...')
    const projects = [
      { name: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', color: '#3B82F6', description: '–ü—Ä–æ–µ–∫—Ç—ã –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' },
      { name: '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', color: '#10B981', description: 'iOS –∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' },
      { name: '–î–∏–∑–∞–π–Ω', color: '#F59E0B', description: 'UI/UX –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç—ã' },
      { name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', color: '#EF4444', description: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏' }
    ]
    
    const { data: projectsData, error: projectsError } = await supabase
      .from('projects')
      .insert(projects.map(p => ({ ...p, user_id: demoUser.id })))
      .select()
    
    if (projectsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsError.message)
    } else {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', projectsData.length)
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
    console.log('\n‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏...')
    const projectMap = {}
    projectsData?.forEach(project => {
      projectMap[project.name] = project.id
    })
    
    const tasks = [
      {
        title: '–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∑–∞–π–Ω –∏ –≤–µ—Ä—Å—Ç–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞',
        priority: 'high',
        project_id: projectMap['–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
        date: '2024-01-15',
        completed: false
      },
      {
        title: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
        description: '–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –ë–î –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
        priority: 'high',
        project_id: projectMap['–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
        date: '2024-01-16',
        completed: true
      },
      {
        title: '–°–æ–∑–¥–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥–∞',
        priority: 'medium',
        project_id: projectMap['–î–∏–∑–∞–π–Ω'],
        date: '2024-01-17',
        completed: false
      }
    ]
    
    const { data: tasksData, error: tasksError } = await supabase
      .from('tasks')
      .insert(tasks.map(t => ({ ...t, user_id: demoUser.id })))
      .select()
    
    if (tasksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:', tasksError.message)
    } else {
      console.log('‚úÖ –ó–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã:', tasksData.length)
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
    console.log('\nüìÇ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏...')
    const folders = [
      { name: '–ü—Ä–æ–µ–∫—Ç—ã', color: '#3B82F6' },
      { name: '–ü–ª–∞–Ω—ã', color: '#10B981' },
      { name: '–û–±—É—á–µ–Ω–∏–µ', color: '#F59E0B' }
    ]
    
    const { data: foldersData, error: foldersError } = await supabase
      .from('folders')
      .insert(folders.map(f => ({ ...f, user_id: demoUser.id })))
      .select()
    
    if (foldersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫:', foldersError.message)
    } else {
      console.log('‚úÖ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:', foldersData.length)
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
    console.log('\nüìù –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫–∏...')
    const folderMap = {}
    foldersData?.forEach(folder => {
      folderMap[folder.name] = folder.id
    })
    
    const notes = [
      {
        title: '–ò–¥–µ–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
        content: '<h3>–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h3><p>–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏</p>',
        folder_id: folderMap['–ü—Ä–æ–µ–∫—Ç—ã'],
        pinned: true
      },
      {
        title: '–ü–ª–∞–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é',
        content: '<h3>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</h3><p>‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ 10:00</p><p>‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –¥–∏–∑–∞–π–Ω–æ–º</p>',
        folder_id: folderMap['–ü–ª–∞–Ω—ã'],
        pinned: false
      }
    ]
    
    const { data: notesData, error: notesError } = await supabase
      .from('notes')
      .insert(notes.map(n => ({ ...n, user_id: demoUser.id })))
      .select()
    
    if (notesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫:', notesError.message)
    } else {
      console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:', notesData.length)
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\nüí∞ –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...')
    const financeCategories = [
      { name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', type: 'income', parent_id: null },
      { name: '–§—Ä–∏–ª–∞–Ω—Å', type: 'income', parent_id: null },
      { name: '–ü—Ä–æ–¥—É–∫—Ç—ã', type: 'expense', parent_id: null },
      { name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', type: 'expense', parent_id: null }
    ]
    
    const { data: financeCatsData, error: financeCatsError } = await supabase
      .from('finance_categories')
      .insert(financeCategories.map(c => ({ ...c, user_id: demoUser.id })))
      .select()
    
    if (financeCatsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', financeCatsError.message)
    } else {
      console.log('‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:', financeCatsData.length)
    }
    
    console.log('\nüéâ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!')
    console.log('\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:')
    console.log('   Email: demo@frovo.com')
    console.log('   Password: demo123456')
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–æ:')
    console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 1`)
    console.log(`   üìÅ –ü—Ä–æ–µ–∫—Ç—ã: ${projectsData?.length || 0}`)
    console.log(`   ‚úÖ –ó–∞–¥–∞—á–∏: ${tasksData?.length || 0}`)
    console.log(`   üìÇ –ü–∞–ø–∫–∏: ${foldersData?.length || 0}`)
    console.log(`   üìù –ó–∞–º–µ—Ç–∫–∏: ${notesData?.length || 0}`)
    console.log(`   üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${financeCatsData?.length || 0}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
  } finally {
    rl.close()
  }
}

main()
